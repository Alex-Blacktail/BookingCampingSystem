// <auto-generated />
using System;
using Booking.System.WebApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.System.WebApi.Migrations
{
    [DbContext(typeof(CampDbContext))]
    partial class CampDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.BirthCertificateForeign", b =>
                {
                    b.Property<int>("BirthCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("birth_certificate_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("BirthCertificateId"));

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date")
                        .HasColumnName("date_of_issue");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("issued_by");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("number");

                    b.Property<string>("Series")
                        .HasColumnType("character varying")
                        .HasColumnName("series");

                    b.HasKey("BirthCertificateId")
                        .HasName("birth_certificate_foreign_pkey");

                    b.ToTable("birth_certificate_foreign", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.BirthCertificateRu", b =>
                {
                    b.Property<int>("BirthCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("birth_certificate_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("BirthCertificateId"));

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date")
                        .HasColumnName("date_of_issue");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("issued_by");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("number");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("series");

                    b.HasKey("BirthCertificateId")
                        .HasName("birth_certificate_ru_pkey");

                    b.ToTable("birth_certificate_ru", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Booking.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressContent")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("address_content");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("citizenship");

                    b.HasKey("AddressId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Camp", b =>
                {
                    b.Property<int>("CampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("camp_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CampId"));

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<bool>("ChildrensHolidayCertificate")
                        .HasColumnType("boolean")
                        .HasColumnName("childrens_holiday_certificate");

                    b.Property<double>("ChildsAgeEnd")
                        .HasColumnType("double precision")
                        .HasColumnName("childs_age_end");

                    b.Property<double>("ChildsAgeStart")
                        .HasColumnType("double precision")
                        .HasColumnName("childs_age_start");

                    b.Property<bool?>("EducationalLicense")
                        .HasColumnType("boolean")
                        .HasColumnName("educational_license");

                    b.Property<string>("Food")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("food");

                    b.Property<string>("LegalEntity")
                        .HasColumnType("character varying")
                        .HasColumnName("legal_entity");

                    b.Property<bool?>("MedicalLicense")
                        .HasColumnType("boolean")
                        .HasColumnName("medical_license");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfBuildings")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_buildings");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying")
                        .HasColumnName("short_name");

                    b.Property<double>("TheAreaOfTheLand")
                        .HasColumnType("double precision")
                        .HasColumnName("the_area_of_​​the_land");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("character varying")
                        .HasColumnName("website_link");

                    b.Property<int>("WorkingModeId")
                        .HasColumnType("integer")
                        .HasColumnName("working_mode_id");

                    b.HasKey("CampId");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "WorkingModeId" }, "fki_working_mode_fkey");

                    b.ToTable("camp", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Child", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ChildId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int?>("BirthCertificateForeignId")
                        .HasColumnType("integer")
                        .HasColumnName("birth_certificate_foreign_id");

                    b.Property<int?>("BirthCertificateRuId")
                        .HasColumnType("integer")
                        .HasColumnName("birth_certificate_ru_id");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int?>("PassportForeignId")
                        .HasColumnType("integer")
                        .HasColumnName("passport_foreign_id");

                    b.Property<int?>("PassportRuId")
                        .HasColumnType("integer")
                        .HasColumnName("passport_ru_id");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("snils");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("surname");

                    b.HasKey("ChildId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PassportForeignId");

                    b.HasIndex("PassportRuId");

                    b.HasIndex(new[] { "BirthCertificateForeignId" }, "fki_birth_foreign_fkey");

                    b.HasIndex(new[] { "BirthCertificateRuId" }, "fki_birth_ru_fkey");

                    b.ToTable("child", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("FeatureId"));

                    b.Property<int>("CampId")
                        .HasColumnType("integer")
                        .HasColumnName("camp_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("FeatureId");

                    b.HasIndex("CampId");

                    b.ToTable("feature", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("ThirdName")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Booking.System.Domain.LocalAdministrator", b =>
                {
                    b.Property<string>("LocalAdministratorId")
                        .HasColumnType("text")
                        .HasColumnName("local_administrator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Patronomyc")
                        .HasColumnType("character varying")
                        .HasColumnName("patronomyc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.HasKey("LocalAdministratorId");

                    b.HasIndex(new[] { "LocalAdministratorId" }, "fki_id_local_admin_fkey");

                    b.HasIndex(new[] { "LocalAdministratorId" }, "fki_local_administrator_id");

                    b.ToTable("local_administrator", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Parent", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("text")
                        .HasColumnName("parent_id");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int?>("PassportForeignId")
                        .HasColumnType("integer")
                        .HasColumnName("passport_foreign_id");

                    b.Property<int?>("PassportRuId")
                        .HasColumnType("integer")
                        .HasColumnName("passport_ru_id");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("snils");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("surname");

                    b.HasKey("ParentId");

                    b.HasIndex(new[] { "AddressId" }, "fki_address_fkey");

                    b.HasIndex(new[] { "PassportForeignId" }, "fki_passport_foreign_fkey");

                    b.HasIndex(new[] { "PassportRuId" }, "fki_passport_ru_fkey");

                    b.HasIndex(new[] { "StatusId" }, "fki_status_fkey");

                    b.ToTable("parent", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.PassportForeign", b =>
                {
                    b.Property<int>("PassportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("passport_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PassportId"));

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date")
                        .HasColumnName("date_of_issue");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("issued_by");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("number");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("series");

                    b.Property<DateOnly?>("Validity")
                        .HasColumnType("date")
                        .HasColumnName("validity");

                    b.HasKey("PassportId")
                        .HasName("passport_foreign_pkey");

                    b.ToTable("passport_foreign", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.PassportRu", b =>
                {
                    b.Property<int>("PassportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("passport_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PassportId"));

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date")
                        .HasColumnName("date_of_issue");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("issued_by");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("number");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("series");

                    b.HasKey("PassportId")
                        .HasName("passport_ru_pkey");

                    b.ToTable("passport_ru", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shift_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ShiftId"));

                    b.Property<int>("CampId")
                        .HasColumnType("integer")
                        .HasColumnName("camp_id");

                    b.Property<DateOnly>("DateEnd")
                        .HasColumnType("date")
                        .HasColumnName("date_end");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("date_start");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("ShiftId");

                    b.HasIndex(new[] { "CampId" }, "fki_camp_fkey");

                    b.ToTable("shift", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftByShiftType", b =>
                {
                    b.Property<int>("ShiftByShiftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shift_by_shift_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ShiftByShiftTypeId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("ShiftId")
                        .HasColumnType("integer")
                        .HasColumnName("shift_id");

                    b.Property<int>("ShiftTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("shift_type_id");

                    b.HasKey("ShiftByShiftTypeId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("shift_by_shift_type", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("request_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RequestId"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parent_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("ShiftByShiftTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("shift_by_shift_type_id");

                    b.HasKey("RequestId")
                        .HasName("shift_request_pkey");

                    b.HasIndex(new[] { "ChildId" }, "fki_child_fkey");

                    b.HasIndex(new[] { "ParentId" }, "fki_parent_fkey");

                    b.HasIndex(new[] { "ShiftByShiftTypeId" }, "fki_shift_by_shift_type");

                    b.ToTable("shift_request", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftType", b =>
                {
                    b.Property<int>("ShiftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shift_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ShiftTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("ShiftTypeId");

                    b.ToTable("shift_type", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("StatusId");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.SuperAdministrator", b =>
                {
                    b.Property<string>("SuperAdministratorId")
                        .HasColumnType("text")
                        .HasColumnName("super_administrator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Patronomyc")
                        .HasColumnType("character varying")
                        .HasColumnName("patronomyc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.HasKey("SuperAdministratorId");

                    b.HasIndex(new[] { "SuperAdministratorId" }, "fki_super_administrator_fkey");

                    b.ToTable("super_administrator", (string)null);
                });

            modelBuilder.Entity("Booking.System.Domain.WorkingMode", b =>
                {
                    b.Property<int>("WorkingModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("working_mode_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("WorkingModeId"));

                    b.Property<DateTime?>("FridayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("friday_end");

                    b.Property<DateTime?>("FridayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("friday_start");

                    b.Property<DateTime?>("MondayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("monday_end");

                    b.Property<DateTime?>("MondayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("monday_start");

                    b.Property<DateTime?>("SaturdayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("saturday_end");

                    b.Property<DateTime?>("SaturdayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("saturday_start");

                    b.Property<DateTime?>("SundayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sunday_end");

                    b.Property<DateTime?>("SundayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sunday_start");

                    b.Property<DateTime?>("ThursdayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("thursday_end");

                    b.Property<DateTime?>("ThursdayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("thursday_start");

                    b.Property<DateTime?>("TuesdayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tuesday_end");

                    b.Property<DateTime?>("TuesdayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tuesday_start");

                    b.Property<DateTime?>("WednesdayEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("wednesday_end");

                    b.Property<DateTime?>("WednesdayStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("wednesday_start");

                    b.HasKey("WorkingModeId");

                    b.ToTable("working_mode", (string)null);
                });

            modelBuilder.Entity("LocalAdministratorCamp", b =>
                {
                    b.Property<string>("IdLocalAdmin")
                        .HasColumnType("text")
                        .HasColumnName("id_local_admin");

                    b.Property<int>("IdCamp")
                        .HasColumnType("integer")
                        .HasColumnName("id_camp");

                    b.HasKey("IdLocalAdmin", "IdCamp")
                        .HasName("local_administrator_camp_pkey");

                    b.HasIndex("IdCamp");

                    b.ToTable("local_administrator_camp", (string)null);
                });

            modelBuilder.Entity("ParentChild", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("text")
                        .HasColumnName("parent_id");

                    b.Property<int>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId")
                        .HasName("parent_child_pkey");

                    b.HasIndex("ChildId");

                    b.ToTable("parent_child", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.System.Domain.Camp", b =>
                {
                    b.HasOne("Booking.System.Domain.Booking.Address", "Address")
                        .WithMany("Camps")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("address_fkey");

                    b.HasOne("Booking.System.Domain.WorkingMode", "WorkingMode")
                        .WithMany("Camps")
                        .HasForeignKey("WorkingModeId")
                        .IsRequired()
                        .HasConstraintName("working_mode_fkey");

                    b.Navigation("Address");

                    b.Navigation("WorkingMode");
                });

            modelBuilder.Entity("Booking.System.Domain.Child", b =>
                {
                    b.HasOne("Booking.System.Domain.Booking.Address", "Address")
                        .WithMany("Children")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("address_fkey");

                    b.HasOne("Booking.System.Domain.BirthCertificateForeign", "BirthCertificateForeign")
                        .WithMany("Children")
                        .HasForeignKey("BirthCertificateForeignId")
                        .HasConstraintName("birth_foreign_fkey");

                    b.HasOne("Booking.System.Domain.BirthCertificateRu", "BirthCertificateRu")
                        .WithMany("Children")
                        .HasForeignKey("BirthCertificateRuId")
                        .HasConstraintName("birth_ru_fkey");

                    b.HasOne("Booking.System.Domain.PassportForeign", "PassportForeign")
                        .WithMany("Children")
                        .HasForeignKey("PassportForeignId")
                        .HasConstraintName("passport_foreign_fkey");

                    b.HasOne("Booking.System.Domain.PassportRu", "PassportRu")
                        .WithMany("Children")
                        .HasForeignKey("PassportRuId")
                        .HasConstraintName("passport_ru_fkey");

                    b.Navigation("Address");

                    b.Navigation("BirthCertificateForeign");

                    b.Navigation("BirthCertificateRu");

                    b.Navigation("PassportForeign");

                    b.Navigation("PassportRu");
                });

            modelBuilder.Entity("Booking.System.Domain.Feature", b =>
                {
                    b.HasOne("Booking.System.Domain.Camp", "Camp")
                        .WithMany("Features")
                        .HasForeignKey("CampId")
                        .IsRequired()
                        .HasConstraintName("camp_id");

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetRoleClaim", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUserClaim", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUserLogin", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUserToken", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking.System.Domain.LocalAdministrator", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", "LocalAdministratorNavigation")
                        .WithOne("LocalAdministrator")
                        .HasForeignKey("Booking.System.Domain.LocalAdministrator", "LocalAdministratorId")
                        .IsRequired()
                        .HasConstraintName("local_administrator_fkey");

                    b.Navigation("LocalAdministratorNavigation");
                });

            modelBuilder.Entity("Booking.System.Domain.Parent", b =>
                {
                    b.HasOne("Booking.System.Domain.Booking.Address", "Address")
                        .WithMany("Parents")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("address_fkey");

                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", "ParentNavigation")
                        .WithOne("Parent")
                        .HasForeignKey("Booking.System.Domain.Parent", "ParentId")
                        .IsRequired()
                        .HasConstraintName("parent_id_fkey");

                    b.HasOne("Booking.System.Domain.PassportForeign", "PassportForeign")
                        .WithMany("Parents")
                        .HasForeignKey("PassportForeignId")
                        .HasConstraintName("passport_foreign_fkey");

                    b.HasOne("Booking.System.Domain.PassportRu", "PassportRu")
                        .WithMany("Parents")
                        .HasForeignKey("PassportRuId")
                        .HasConstraintName("passport_ru_fkey");

                    b.HasOne("Booking.System.Domain.Status", "Status")
                        .WithMany("Parents")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("status_fkey");

                    b.Navigation("Address");

                    b.Navigation("ParentNavigation");

                    b.Navigation("PassportForeign");

                    b.Navigation("PassportRu");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Booking.System.Domain.Shift", b =>
                {
                    b.HasOne("Booking.System.Domain.Camp", "Camp")
                        .WithMany("Shifts")
                        .HasForeignKey("CampId")
                        .IsRequired()
                        .HasConstraintName("camp_fkey");

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftByShiftType", b =>
                {
                    b.HasOne("Booking.System.Domain.Shift", "Shift")
                        .WithMany("ShiftByShiftTypes")
                        .HasForeignKey("ShiftId")
                        .IsRequired()
                        .HasConstraintName("shift_id");

                    b.HasOne("Booking.System.Domain.ShiftType", "ShiftType")
                        .WithMany("ShiftByShiftTypes")
                        .HasForeignKey("ShiftTypeId")
                        .IsRequired()
                        .HasConstraintName("shift_type_fkey");

                    b.Navigation("Shift");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftRequest", b =>
                {
                    b.HasOne("Booking.System.Domain.Child", "Child")
                        .WithMany("ShiftRequests")
                        .HasForeignKey("ChildId")
                        .IsRequired()
                        .HasConstraintName("child_fkey");

                    b.HasOne("Booking.System.Domain.Parent", "Parent")
                        .WithMany("ShiftRequests")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("parent_fkey");

                    b.HasOne("Booking.System.Domain.ShiftByShiftType", "ShiftByShiftType")
                        .WithMany("ShiftRequests")
                        .HasForeignKey("ShiftByShiftTypeId")
                        .IsRequired()
                        .HasConstraintName("shift_by_shift_type");

                    b.Navigation("Child");

                    b.Navigation("Parent");

                    b.Navigation("ShiftByShiftType");
                });

            modelBuilder.Entity("Booking.System.Domain.SuperAdministrator", b =>
                {
                    b.HasOne("Booking.System.Domain.IdentityAspNet.AspNetUser", "SuperAdministratorNavigation")
                        .WithOne("SuperAdministrator")
                        .HasForeignKey("Booking.System.Domain.SuperAdministrator", "SuperAdministratorId")
                        .IsRequired()
                        .HasConstraintName("super_administrator_fkey");

                    b.Navigation("SuperAdministratorNavigation");
                });

            modelBuilder.Entity("LocalAdministratorCamp", b =>
                {
                    b.HasOne("Booking.System.Domain.Camp", null)
                        .WithMany()
                        .HasForeignKey("IdCamp")
                        .IsRequired()
                        .HasConstraintName("camp_fkey");

                    b.HasOne("Booking.System.Domain.LocalAdministrator", null)
                        .WithMany()
                        .HasForeignKey("IdLocalAdmin")
                        .IsRequired()
                        .HasConstraintName("local_admin_fkey");
                });

            modelBuilder.Entity("ParentChild", b =>
                {
                    b.HasOne("Booking.System.Domain.Child", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .IsRequired()
                        .HasConstraintName("child_fkey");

                    b.HasOne("Booking.System.Domain.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("parent_fkey");
                });

            modelBuilder.Entity("Booking.System.Domain.BirthCertificateForeign", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Booking.System.Domain.BirthCertificateRu", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Booking.System.Domain.Booking.Address", b =>
                {
                    b.Navigation("Camps");

                    b.Navigation("Children");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("Booking.System.Domain.Camp", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Booking.System.Domain.Child", b =>
                {
                    b.Navigation("ShiftRequests");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Booking.System.Domain.IdentityAspNet.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("LocalAdministrator");

                    b.Navigation("Parent");

                    b.Navigation("SuperAdministrator");
                });

            modelBuilder.Entity("Booking.System.Domain.Parent", b =>
                {
                    b.Navigation("ShiftRequests");
                });

            modelBuilder.Entity("Booking.System.Domain.PassportForeign", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("Booking.System.Domain.PassportRu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("Booking.System.Domain.Shift", b =>
                {
                    b.Navigation("ShiftByShiftTypes");
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftByShiftType", b =>
                {
                    b.Navigation("ShiftRequests");
                });

            modelBuilder.Entity("Booking.System.Domain.ShiftType", b =>
                {
                    b.Navigation("ShiftByShiftTypes");
                });

            modelBuilder.Entity("Booking.System.Domain.Status", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("Booking.System.Domain.WorkingMode", b =>
                {
                    b.Navigation("Camps");
                });
#pragma warning restore 612, 618
        }
    }
}
